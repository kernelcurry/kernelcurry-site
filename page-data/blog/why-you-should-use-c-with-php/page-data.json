{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/why-you-should-use-c-with-php/","result":{"data":{"site":{"siteMetadata":{"title":"KernelCurry","author":"KernelCurry"}},"markdownRemark":{"id":"e895cd8b-05a1-5b74-bd5c-7c28877be655","excerpt":"A few months ago, I calculated the top Magic: The Gathering cards in the games modern format LINK_BROKEN. This was accomplished using pure…","html":"<p>A few months ago, I calculated the top Magic: The Gathering cards in the games modern format [LINK_BROKEN]. This was accomplished using pure PHP. In total it took about 30 minutes to calculate. With a 30 minute runtime, I wanted to find a faster way to crunch the numbers. What better way than to use C.</p>\n<p>As I did not want to spend the time rewriting code if it did not make a difference, I thought I would use a simple application for this experiment: Calculating the nth term of the fibonacci sequence.</p>\n<h3>Results</h3>\n<p>To start, let’s look at the big picture. the graph below shows the runtime in micro seconds of executing pure PHP &#x26; PHP using C from term 0 to 100,000 tested every 1000 terms.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fibonacci-100000.png [Image Missing]</code></pre></div>\n<p>As can been seen, there is a huge difference in runtime between the 2 applications. With lots of calculations, using pure PHP does not stand a chance against its counterpart of using C to do the heavy lifting.</p>\n<p>Although there is a huge difference when calculating a large term, let’s drill down a little deeper. This next graph shows the runtime of the nth term being calculated from 0 to 1000 tested every term.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">fibonacci-1000.png  [Image Missing]</code></pre></div>\n<p>It looks like there is a grace period where pure PHP out performs PHP using C. When calculating the terms 0 to 728 using pure PHP is faster. But, you are only saving, at most, 6000 microseconds (0.006 Seconds).</p>\n<h3>Conclusion</h3>\n<p>Although using C to do the heavy lifting of calculations is overall faster, it may be overkill for some situations. But when it comes down to brass tacks, I am going to use C.</p>\n<h3>Specifics</h3>\n<p>Source Code: <a href=\"https://github.com/kernelcurry/fibonacci-php-c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">kernelcurry/fibonacci-php-c</a></p>\n<p>Computer: All tests were completed on a Macbook Air.</p>\n<p>Data Collected: All data was collected using <a href=\"https://github.com/facebook/xhprof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xhprof</a></p>\n<p>Data Points: Tests were run 4 times at each data point.</p>\n<hr>\n<p><strong>UPDATE [06-23-2017]:</strong> Most of the link and images on this page are broken.  Please stay tuned for a follow-up blog post on this topic.</p>","fields":{"readingTime":{"text":"2 min read"}},"frontmatter":{"title":"Why You Should Use C With Php","date":"January 07, 2014","description":"A few months ago, I calculated the top Magic: The Gathering cards in the games modern format ... It took 30 minutes in PHP.  How long would it take in C?"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/why-you-should-use-c-with-php/","previous":{"fields":{"slug":"/benchmark-analysis-of-php-array-loops/"},"frontmatter":{"title":"Benchmark Analysis Of PHP Array Loops"},"parent":{"id":"57781f8c-118c-5ad7-a4bd-3ddcc2625d39","name":"index","sourceInstanceName":"blog"}},"next":{"fields":{"slug":"/company-hack-night/"},"frontmatter":{"title":"Every Company Should Have a #HackNight"},"parent":{"id":"25a8a9f2-113d-5a4a-af4c-baa2d81a44e4","name":"index","sourceInstanceName":"blog"}}}}}