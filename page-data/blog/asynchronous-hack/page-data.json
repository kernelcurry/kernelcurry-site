{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/asynchronous-hack/","result":{"data":{"site":{"siteMetadata":{"title":"KernelCurry","author":"KernelCurry"}},"markdownRemark":{"id":"33badfc2-a8ef-5e41-9b27-f34561d4b912","excerpt":"The ability for PHP programs to execute asynchronous functions… Yeah, I said it and now it exists. By coding in Facebook’s new Hack Language…","html":"<p>The ability for PHP programs to execute asynchronous functions… Yeah, I said it and now it exists. By coding in Facebook’s new Hack Language, using your CPU’s cycles correctly has never been so easy. Let’s delve into this new language head first!</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n* This function calls async functions\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> void\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'[main] Calling Async Function'</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$asyncCall</span> <span class=\"token operator\">=</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'[main] Triangulating Atlantis'</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'[main] Calculating the Meaning Of Life'</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'[main] Triangulating Atlantis'</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'[main] Time To Request Async Return Information'</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$output</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$asyncCall</span><span class=\"token operator\">-</span><span class=\"token operator\">></span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Output Vector Data</span>\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$output</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$key</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token variable\">$value</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'['</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$key</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'] => '</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$value</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As can be see, this function is no different than any normal PHP function. The only thing you have to notice is the function <code class=\"language-text\">join()</code> called on line 14. This function calls the data from the asynchronous function initialized on line 7.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n* This async function calls more async functions\n*\n* @return Vector&lt;T>\n*/</span>\nasync <span class=\"token keyword\">function</span> <span class=\"token function\">getInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">:</span> Awaitable<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>Vector<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span><span class=\"token constant\">T</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span><span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$info</span> <span class=\"token operator\">=</span> Vector <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token variable\">$i</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$info</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">genInfo</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$i</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'[getInfo] Now Awaiting'</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> await GenVectorWaitHandle<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$info</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Note the async attribute of the function. This lets the compiler know the function is an asynchronous function. Secondly note the Awaitable return type. This will allow the function to use the <code class=\"language-text\">await</code> reserved word.</p>\n<p>The ‘await’ token tells the function that everything preceding runs asynchronously but has to wait for $info to be completed before continuing.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n* This async function generates information\n*\n* @return String\n*/</span>\nasync <span class=\"token keyword\">function</span> <span class=\"token function\">genInfo</span><span class=\"token punctuation\">(</span>int <span class=\"token variable\">$id</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> Awaitable<span class=\"token operator\">&amp;</span>lt<span class=\"token punctuation\">;</span>String<span class=\"token operator\">&amp;</span>gt<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">echo</span> <span class=\"token single-quoted-string string\">'[getInfo] Generating '</span><span class=\"token punctuation\">.</span><span class=\"token variable\">$id</span><span class=\"token punctuation\">.</span><span class=\"token double-quoted-string string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$tmp</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'id'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$id</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'start'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'H:i:s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    await SleepWaitHandle<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token function\">mt_rand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">,</span><span class=\"token number\">5000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token variable\">$tmp</span><span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'end'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'H:i:s'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">echo</span> <span class=\"token double-quoted-string string\">\"[getInfo] Completed <span class=\"token interpolation\"><span class=\"token variable\">$id</span></span>\\n\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token function\">json_encode</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$tmp</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>This function just sets a random time for <code class=\"language-text\">calculations</code> to be completed to simulate work that could be done. The reason this function exists is to save the start and end times of the function.</p>\n<p>The last thing that must be noted about these function is the WaitHandle. This allows async function to call other functions asynchronously.</p>\n<p>Below is the final output. The last 5 lines say it all!</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">[main] Calling Async Function\n[getInfo] Generating 0\n[getInfo] Generating 1\n[getInfo] Generating 2\n[getInfo] Generating 3\n[getInfo] Generating 4\n[getInfo] Now Awaiting\n[main] Triangulating Atlantis\n[main] Calculating the Meaning Of Life\n[main] Triangulating Atlantis\n[main] Time To Request Async Return Information\n[getInfo] Completed 2\n[getInfo] Completed 0\n[getInfo] Completed 4\n[getInfo] Completed 1\n[getInfo] Completed 3\n[0] =&gt; {&quot;id&quot;:0,&quot;start&quot;:&quot;22:20:34&quot;,&quot;end&quot;:&quot;22:20:36&quot;}\n[1] =&gt; {&quot;id&quot;:1,&quot;start&quot;:&quot;22:20:34&quot;,&quot;end&quot;:&quot;22:20:37&quot;}\n[2] =&gt; {&quot;id&quot;:2,&quot;start&quot;:&quot;22:20:34&quot;,&quot;end&quot;:&quot;22:20:35&quot;}\n[3] =&gt; {&quot;id&quot;:3,&quot;start&quot;:&quot;22:20:34&quot;,&quot;end&quot;:&quot;22:20:39&quot;}\n[4] =&gt; {&quot;id&quot;:4,&quot;start&quot;:&quot;22:20:34&quot;,&quot;end&quot;:&quot;22:20:36&quot;}</code></pre></div>\n<p>All said and done, this is the feature that made me want to start using Hack as a production language. Even if this language crashes and burns, like too many in the past, this feature alone allows me to be hopeful for the future.</p>\n<p>Github: <a href=\"https://github.com/kernelcurry/hack-examples/blob/master/async.php\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/kernelcurry/hack-examples/blob/master/async.php</a></p>","fields":{"readingTime":{"text":"3 min read"}},"frontmatter":{"title":"Asynchronous Functions In Hack","date":"April 22, 2014","description":"The ability for PHP programs to execute asynchronous functions… Yeah, I said it and now it exists. By coding in Facebook’s new Hack Language, using your CPU’s cycles correctly has never been so easy. Let’s delve into this new language head first!"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/asynchronous-hack/","previous":{"fields":{"slug":"/facebooks-hack-developer-day-2014/"},"frontmatter":{"title":"Facebook’s Hack Developer Day 2014"},"parent":{"id":"2d38797a-3068-5987-9f21-e66e945c47b1","name":"index","sourceInstanceName":"blog"}},"next":{"fields":{"slug":"/wordpress-to-jekyll/"},"frontmatter":{"title":"From WordPress To Jekyll"},"parent":{"id":"93f643f1-5081-50f8-b192-8e43e612d0f6","name":"index","sourceInstanceName":"blog"}}}}}