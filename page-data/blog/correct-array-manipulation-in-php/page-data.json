{"componentChunkName":"component---src-templates-blog-js","path":"/blog/correct-array-manipulation-in-php/","result":{"data":{"site":{"siteMetadata":{"title":"KernelCurry","author":"KernelCurry"}},"markdownRemark":{"id":"b9d85191-f939-5680-a53a-4da0d7350894","excerpt":"UPDATE: Migrated from a post I wrote when working on leve.rs More often than not, when PHP developers debug others’ code, the majority of…","html":"<p><em>UPDATE:</em> Migrated from a <a href=\"https://web.archive.org/web/20140718092350/http://leve.rs:80/blog/correct-array-manipulation-in-php/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">post</a> I wrote when working on leve.rs</p>\n<hr>\n<p>More often than not, when PHP developers debug others’ code, the majority of each method is taken up by array manipulations. Spending this much time on array manipulations is a huge hassle when trying to understand any given method.</p>\n<p>In order to speed up the debugging process, it’s important to start writing array manipulations the correct way, first. Here are a few examples of code I have either written myself or had to fix in the past. It is time every PHP developer knows how to manipulate arrays properly!</p>\n<h3>Merging Arrays</h3>\n<p>The seemingly simple merging of arrays is something that comes up all the time. The first code snippet is something that is seen all the time (long way, wrong way). The second takes advantage of PHP’s array functions.</p>\n<h5>The Wrong Way</h5>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Init Arrays</span>\n<span class=\"token variable\">$arrayMerged</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$arrayOne</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$arrayTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Merge arrayOne</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayOne</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$arrayMerged</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Merge arrayTwo</span>\n<span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayTwo</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$arrayMerged</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Print</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayMerged</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>The Correct Way</h5>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Init Arrays</span>\n<span class=\"token variable\">$arrayOne</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$arrayTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Merge Arrays</span>\n<span class=\"token variable\">$arrayMerged</span> <span class=\"token operator\">=</span> <span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayOne</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arrayTwo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Print</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayMerged</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>By simplifying these lines, the code is not only more readable, it eliminates 10 lines!</p>\n<h3>Array Value Manipulation</h3>\n<p>No mater how many times you look at code, you will always find foreach statements that do not need to be there. To be fair, in some cases foreach statements are the way to go, but not all the time. The below example “slug-ifies” the array values.</p>\n<h5>The Wrong Way</h5>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Init Arrays</span>\n<span class=\"token variable\">$arrayAfter</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$arrayBefore</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Michael Smith'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Alice Staples'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Sanitize everything</span>\n<span class=\"token keyword\">foreach</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayBefore</span> <span class=\"token keyword\">as</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$element</span> <span class=\"token operator\">=</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/[^A-Za-z0-9-]+/'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$element</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$arrayAfter</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Print</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayAfter</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5>The Correct Way</h5>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Init Arrays</span>\n<span class=\"token variable\">$arraySlugs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'John Doe'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Michael Smith'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'Alice Staples'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">array_walk</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arraySlugs</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>amp<span class=\"token punctuation\">;</span><span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n        <span class=\"token variable\">$element</span> <span class=\"token operator\">=</span> <span class=\"token function\">preg_replace</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'/[^A-Za-z0-9-]+/'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'-'</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token variable\">$element</span> <span class=\"token operator\">=</span> <span class=\"token function\">strtolower</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$element</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Print</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arraySlugs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>As can be seen, the solution using array_walk manipulates the existing array. This means you do not have to instantiate another array, thus, saving resources. There are many different solutions to this particular problem, but this is one solution that is easy to read.</p>\n<h3>Array Value Manipulation Continued</h3>\n<p>Although the previous examples are very common and good to know, this example is something that will actually cause errors. It is very apparent when people do not know the difference between array_merge() and the ‘+’ operator when it comes to arrays. Lets look at the code first.</p>\n<h5>Know the Difference</h5>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// Init Arrays</span>\n<span class=\"token variable\">$arrayOne</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'three'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token variable\">$arrayTwo</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token single-quoted-string string\">'one'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'two'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'four'</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayOne</span> <span class=\"token operator\">+</span> <span class=\"token variable\">$arrayTwo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">var_dump</span><span class=\"token punctuation\">(</span><span class=\"token function\">array_merge</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$arrayOne</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$arrayTwo</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Using the ‘+’ operator with an array will only merge elements for keys that don’t already exist. This means that if arrayOne has keys ’0′ and ’2′ and arrayTwo has keys ’0′, ’1′ and ’2′ the returned array will contain arrayOne’s keys ’0′ and ’2′ with arrayTwo’s key ’1′</p>\n<p>The array_merge function merges arrayTwo into arrayOne. In other words, all elements from arrayTwo will overwrite values with the same key in arrayOne.</p>\n<h5>Output</h5>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">// ($arrayOne + $arrayTwo)</span>\n<span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"one\"</span><span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"two\"</span><span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"three\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"four\"</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// array_merge($arrayOne, $arrayTwo)</span>\n<span class=\"token keyword\">array</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"one\"</span><span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"two\"</span><span class=\"token punctuation\">]</span>   <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"three\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">[</span><span class=\"token double-quoted-string string\">\"four\"</span><span class=\"token punctuation\">]</span>  <span class=\"token operator\">=</span><span class=\"token operator\">></span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Array manipulation is something every programmer should know. By understanding the available functions, your life will become easier and your code more elegant. Take the time to rewrite your code the correct way – It’s definitely worth it!</p>","fields":{"readingTime":{"text":"4 min read"}},"frontmatter":{"title":"Array Manipulation in PHP, The Correct Way","date":"October 31, 2013","description":"More often than not, when PHP developers debug others’ code, the majority of each method is taken up by array manipulations. Spending this much time on array manipulations is a huge hassle when trying to understand any given method."}}},"pageContext":{"slug":"/correct-array-manipulation-in-php/","previous":{"fields":{"slug":"/introduction/"},"frontmatter":{"title":"Introduction"},"parent":{"id":"94b04639-55a3-5233-82cc-3c11c6a2ad88","name":"index","sourceInstanceName":"blog"}},"next":{"fields":{"slug":"/benchmark-analysis-of-php-array-loops/"},"frontmatter":{"title":"Benchmark Analysis Of PHP Array Loops"},"parent":{"id":"1bf11e81-9836-53bb-a05b-f25a5f106417","name":"index","sourceInstanceName":"blog"}}}}}