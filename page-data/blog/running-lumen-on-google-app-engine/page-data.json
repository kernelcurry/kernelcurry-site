{"componentChunkName":"component---src-templates-blog-js","path":"/blog/running-lumen-on-google-app-engine/","result":{"data":{"site":{"siteMetadata":{"title":"KernelCurry","author":"KernelCurry"}},"markdownRemark":{"id":"518a2fc9-21ab-55b4-9ce1-5fb2ffd4fe38","excerpt":"When looking for a more stable hosting solution for my Magic: The Gathering Api, I stumbled across Google's App Engine.  If you have notâ€¦","html":"<p>When looking for a more stable hosting solution for my <a href=\"https://mtgapi.com?utm_source=kernelcurry.com&#x26;utm_medium=referral&#x26;utm_campaign=running-lumen-on-google-app-engine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Magic: The Gathering Api</a>, I stumbled across Google's App Engine.  If you have not read up on this solution, I would recommend it.</p>\n<p>To get Laravel's Lumen running correctly on Google App Engine, there are a few questions that we need to answer.  Lets take these one at a time.</p>\n<h2>How does the application know it is running on Google App Engine?</h2>\n<p>One of the easiest ways to figure out if the application is running on Google App Engine is to check if the <code class=\"language-text\">.env</code> file is present.  This is because the deployment \"ignore\" RegEx  includes any files that start with a <code class=\"language-text\">.</code> (AKA Unix hidden files).  This function will come in handy when answering the next questions.</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token comment\">/**\n * Check if we are running on Google App Engine\n *\n * NOTE: This is determined based on the .env file.  hidden files\n * (files starting with a dot) are not sent over to Google App\n * Engine on deploy.  This is because these files match the\n * Google App Engine ignore regex.\n *\n * Example Deploy Verbose Output:\n * `2015-08-19 15:10:11,380 INFO appcfg.py:2684 Ignoring\n * file '.env': File matches ignore regex.`\n *\n * @return bool\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_gae</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'/../.env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>How do we make logs work with the Google console?</h2>\n<p>After researching how to get logs working with Google, a lot of people recommend editing vendor files.  Do not do this, let me repeat, <strong>do not edit the vendor files</strong>.  Let's take the more stable approach and override the function that is causing the issue.  </p>\n<p>The first thing we need to do is create the class that will override the logging function.  We can do this by making a new class that extends <code class=\"language-text\">Laravel\\Lumen\\Application</code>.  Then we can  override the logging function.</p>\n<p><em>file: app/Bootstrap/GoogleApp.php</em></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span> <span class=\"token keyword\">namespace</span> <span class=\"token package\">App<span class=\"token punctuation\">\\</span>Bootstrap</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * GoogleApp.php\n *\n * @author  michaelcurry\n */</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Laravel<span class=\"token punctuation\">\\</span>Lumen<span class=\"token punctuation\">\\</span>Application</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Monolog<span class=\"token punctuation\">\\</span>Handler<span class=\"token punctuation\">\\</span>SyslogHandler</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">use</span> <span class=\"token package\">Monolog<span class=\"token punctuation\">\\</span>Logger</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Class GoogleApp\n *\n * @package App\n */</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">GoogleApp</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Application</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/**\n     * Get the Monolog handler for the application.\n     *\n     * @return \\Monolog\\Handler\\AbstractHandler\n     */</span>\n    <span class=\"token keyword\">protected</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getMonologHandler</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">SyslogHandler</span><span class=\"token punctuation\">(</span><span class=\"token single-quoted-string string\">'intranet'</span><span class=\"token punctuation\">,</span> <span class=\"token single-quoted-string string\">'user'</span><span class=\"token punctuation\">,</span> Logger<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token constant\">DEBUG</span><span class=\"token punctuation\">,</span> <span class=\"token boolean constant\">false</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">LOG_PID</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<h2>How do we setup environment variables?</h2>\n<p>Just like normal, the <code class=\"language-text\">.env</code> file will be used for local environment variables. However, the <code class=\"language-text\">.env</code> file is not deployed to Google App Engine, so we need to find a work around.  The good news is <code class=\"language-text\">app.yaml</code> allows for environment variables.  And even better news, Google App Engine plays nice with these environment variables.</p>\n<p>The most important thing to keep in mind is security.  Just as <code class=\"language-text\">.env</code> is ignored in our git repo, we want to ignore <code class=\"language-text\">app.yaml</code> as well.  With this file being excluded from version control, we want to make sure there is a template that users can follow.  We can make <code class=\"language-text\">app.yaml.example</code> that contains the structure with no credentials.  Then we can make <code class=\"language-text\">app.yaml</code> which is a copy of <code class=\"language-text\">app.yaml.example</code> with the correct credentials.</p>\n<p><em>file: app.yaml</em></p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token key atrule\">application</span><span class=\"token punctuation\">:</span> mtgapi<span class=\"token punctuation\">-</span>service\n<span class=\"token key atrule\">version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n<span class=\"token key atrule\">runtime</span><span class=\"token punctuation\">:</span> php55\n<span class=\"token key atrule\">api_version</span><span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n\n<span class=\"token key atrule\">handlers</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /favicon\\.ico\n  <span class=\"token key atrule\">static_files</span><span class=\"token punctuation\">:</span> public/favicon.ico\n  <span class=\"token key atrule\">upload</span><span class=\"token punctuation\">:</span> public/favicon\\.ico\n\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> /.*\n  <span class=\"token key atrule\">script</span><span class=\"token punctuation\">:</span> public/index.php\n\n<span class=\"token key atrule\">env_variables</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">APP_ENV</span><span class=\"token punctuation\">:</span> production\n  <span class=\"token key atrule\">APP_DEBUG</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">false</span>\n  <span class=\"token key atrule\">APP_KEY</span><span class=\"token punctuation\">:</span> SomeRandomStringHere<span class=\"token tag\">!!!</span>\n  <span class=\"token key atrule\">APP_LOCALE</span><span class=\"token punctuation\">:</span> en\n  <span class=\"token key atrule\">APP_FALLBACK_LOCALE</span><span class=\"token punctuation\">:</span> en\n  <span class=\"token key atrule\">DB_CONNECTION</span><span class=\"token punctuation\">:</span> mysql\n  <span class=\"token key atrule\">DB_HOST</span><span class=\"token punctuation\">:</span> localhost\n  <span class=\"token key atrule\">DB_PORT</span><span class=\"token punctuation\">:</span> <span class=\"token number\">3306</span>\n  <span class=\"token key atrule\">DB_DATABASE0</span><span class=\"token punctuation\">:</span> homestead\n  <span class=\"token key atrule\">DB_USERNAME</span><span class=\"token punctuation\">:</span> homestead\n  <span class=\"token key atrule\">DB_PASSWORD</span><span class=\"token punctuation\">:</span> secret\n  <span class=\"token key atrule\">CACHE_DRIVER</span><span class=\"token punctuation\">:</span> file\n  <span class=\"token key atrule\">SESSION_DRIVER</span><span class=\"token punctuation\">:</span> file\n  <span class=\"token key atrule\">QUEUE_DRIVER</span><span class=\"token punctuation\">:</span> sync</code></pre></div>\n<h2>How do we set php.ini settings?</h2>\n<p>This one is very simple.  We just need to create a file in our application root called <code class=\"language-text\">php.ini</code>.  Here, you can set php.ini settings that will be used.  There are two settings I want to bring to your attention.</p>\n<ol>\n<li><code class=\"language-text\">google_app_engine.enable_functions</code> needs to be set to <code class=\"language-text\">php_sapi_name</code> for Lumen to work properly on Google App Engine.  </li>\n<li><code class=\"language-text\">google_app_engine.enable_curl_lite</code> needs to be set to <code class=\"language-text\">1</code> if you are using curl in any way.</li>\n</ol>\n<p><em>file: php.ini</em></p>\n<div class=\"gatsby-highlight\" data-language=\"ini\"><pre class=\"language-ini\"><code class=\"language-ini\"><span class=\"token constant\">google_app_engine.enable_curl_lite</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"1\"</span>\n<span class=\"token constant\">google_app_engine.enable_functions</span> <span class=\"token attr-value\"><span class=\"token punctuation\">=</span> \"php_sapi_name\"</span></code></pre></div>\n<h2>How does everything fit together?</h2>\n<p>Now that we have a function that lets us know when we are running on Google App Engine; have a new Google Application class; set our php.ini settings correctly; and have our environment variables set, all we need to do is put the puzzle pieces together.</p>\n<p>To do this, we need to edit the file <code class=\"language-text\">bootstrap/app.php</code>.</p>\n<ol>\n<li>Load the new Google application class if we are running on Google App Engine.</li>\n<li>Don't load the default <code class=\"language-text\">.env</code> file if we are running on Google App Engine.</li>\n</ol>\n<p><em>file: bootstrap/app.php</em></p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">require_once</span> <span class=\"token constant\">__DIR__</span><span class=\"token punctuation\">.</span><span class=\"token single-quoted-string string\">'/../vendor/autoload.php'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/**\n * Check if we are running on Google App Engine\n *\n * NOTE: This is determined based on the .env file.  hidden files\n * (files starting with a dot) are not sent over to Google App\n * Engine on deploy.  This is because these files match the\n * Google App Engine ignore regex.\n *\n * Example Deploy Verbose Output:\n * `2015-08-19 15:10:11,380 INFO appcfg.py:2684 Ignoring\n * file '.env': File matches ignore regex.`\n *\n * @return bool\n */</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">is_gae</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">file_exists</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'/../.env'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\n|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”\n| Create The Application\n|â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”â€”\n|\n| Here we will load the environment and create the application instance\n| that serves as the central piece of this framework. We'll use this\n| application as an \"IoC\" container and router for this framework.\n|\n*/</span>\n\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">is_gae</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">App<span class=\"token punctuation\">\\</span>Bootstrap<span class=\"token punctuation\">\\</span>GoogleApp</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">realpath</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'/../'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    Dotenv<span class=\"token punctuation\">:</span><span class=\"token punctuation\">:</span><span class=\"token function\">load</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'/../'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token variable\">$app</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Laravel<span class=\"token punctuation\">\\</span>Lumen<span class=\"token punctuation\">\\</span>Application</span><span class=\"token punctuation\">(</span>\n        <span class=\"token function\">realpath</span><span class=\"token punctuation\">(</span><span class=\"token constant\">__DIR__</span> <span class=\"token punctuation\">.</span> <span class=\"token single-quoted-string string\">'/../'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></span></code></pre></div>\n<p><strong>Note:</strong> This is the top of the file <code class=\"language-text\">bootstrap/app.php</code>.  The lines that state <code class=\"language-text\">$app-&gt;withFacades();</code> and <code class=\"language-text\">$app-&gt;withEloquent();</code> should immediately follow.</p>\n<h2>How do we deploy?</h2>\n<p>Awesome! Now that we have everything ready to deploy, lets get this new Lumen project running on Google App Engine.  Keep in mind the following steps assume you are running Mac OSX.  You may have to do things a little differently if you are running Windows or Linux.</p>\n<ol>\n<li>Download the <a href=\"https://cloud.google.com/appengine/downloads?utm_source=kernelcurry.com&#x26;utm_medium=referral&#x26;utm_campaign=running-lumen-on-google-app-engine\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google App Engine Launcher</a></li>\n<li>Open <code class=\"language-text\">GoogleAppEngineLauncher-*.*.*.dmg</code> and move <code class=\"language-text\">GoogleAppEngineLauncher.app</code> into your <code class=\"language-text\">Applications</code> folder</li>\n<li>Open <code class=\"language-text\">GoogleAppEngineLauncher</code> and accept (click 'yes'/'accept') and pop-ups and enter your system password</li>\n</ol>\n<p>From this point, we have to make a decision: do we want to deploy from <code class=\"language-text\">GoogleAppEngineLauncher</code> or the terminal?</p>\n<h4>Deploy From GoogleAppEngineLauncher</h4>\n<p><strong>Pro(s)</strong></p>\n<ul>\n<li>One click deploy</li>\n<li>Deploy multiple apps from a single application</li>\n</ul>\n<p><strong>Con(s)</strong></p>\n<ul>\n<li>Application root folder must have the same name as the Google App Engine project ID</li>\n<li>Do not have the ability to use the full functionality of <code class=\"language-text\">appcfg.py</code> (the deployment command)</li>\n</ul>\n<p>If you're going this route, please make sure the name of your application root folder is the same name as your Google App Engine project ID.  Now, let's get started:</p>\n<ol>\n<li>Click the <code class=\"language-text\">+</code> button in the bottom left corner of the app</li>\n<li>Enter your Application Id</li>\n<li>Select the folder where your application root resides</li>\n<li>Select Runtime as <code class=\"language-text\">PHP</code></li>\n<li>Click 'Create'</li>\n<li>Highlight the newly created application from the list</li>\n<li>Click the deploy button in the top right</li>\n<li>Auth with Google (a webpage will pop up)</li>\n</ol>\n<h4>Deploy From Terminal</h4>\n<p><strong>Pro(s)</strong></p>\n<ul>\n<li>Ability to use full functionality of <code class=\"language-text\">appcfg.py</code> (the deployment command)</li>\n</ul>\n<p><strong>Con(s)</strong></p>\n<ul>\n<li>You have to remember the command or at least make a bash script to run so you don't have to remember it</li>\n</ul>\n<p>Congratulations! It looks like this isn't your first rodeo.  This is by far the most flexible way to deploy your application.</p>\n<ol>\n<li>Open <code class=\"language-text\">terminal</code></li>\n<li>run <code class=\"language-text\">appcfg.py -A &lt;application-id&gt; update &lt;application-root-path&gt;</code></li>\n<li>Auth with Google (a webpage will pop up)</li>\n</ol>\n<h2>Conclusion</h2>\n<p>We did it! Everything is running smoothly and you can access your new Lumen project at <code class=\"language-text\">http://app-id.appspot.com</code></p>\n<p>As we are now using Lumen on Google App Engine, there are a few other things that may need to be done to connect to your CloudSql Instance, use queuing, etcâ€¦  Stay tuned for more posts on topics like these.</p>","fields":{"readingTime":{"text":"7 min read"}},"frontmatter":{"title":"Running Laravel's Lumen On Google App Engine","date":"August 23, 2015","description":"To get Laravel's Lumen running correctly on Google App Engine, there are a few questions that we need to answer.  Lets take these one at a time."}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/running-lumen-on-google-app-engine/","previous":{"fields":{"slug":"/wordpress-to-jekyll/"},"frontmatter":{"title":"From WordPress To Jekyll"},"parent":{"id":"93f643f1-5081-50f8-b192-8e43e612d0f6","name":"index","sourceInstanceName":"blog"}},"next":{"fields":{"slug":"/nintendo-powerfest-1994-reunion-tournament/"},"frontmatter":{"title":"Nintendo PowerFest (1994) Reunion Tournament"},"parent":{"id":"537f9e52-9342-51a9-b495-767a209f797a","name":"index","sourceInstanceName":"blog"}}}}}